@use "sass:map";
@use "sass:list";

$bg-breakpoints: (
  'mobile': 0,
  'phablet': 480px,
  'tablet': 768px,
  'desktop': 1024px,
  'wide': 1280px,
  'ultra': 1440px
);

@mixin up($breakpoint) {
  $value: map.get($bg-breakpoints, $breakpoint);
  @if $value == null {
    @warn 'Unknown breakpoint: #{$breakpoint}';
  } @else if $value == 0 {
    @content;
  } @else {
    @media (min-width: $value) {
      @content;
    }
  }
}

@mixin down($breakpoint) {
  $value: map.get($bg-breakpoints, $breakpoint);

  @if $value == null {
    @warn 'Unknown breakpoint: #{$breakpoint}';
  } @else if $value == 0 {
    @content;
  } @else {
    $max: $value - 0.02px;
    @media (max-width: $max) {
      @content;
    }
  }
}

@mixin between($lower, $upper) {
  $min: map.get($bg-breakpoints, $lower);
  $max: map.get($bg-breakpoints, $upper);

  @if $min == null or $max == null {
    @warn 'Unknown breakpoint range: #{$lower} - #{$upper}';
  } @else {
    $computed-max: $max - 0.02px;
    @media (min-width: $min) and (max-width: $computed-max) {
      @content;
    }
  }
}

@mixin only($breakpoint) {
  $value: map.get($bg-breakpoints, $breakpoint);

  @if $value == null {
    @warn 'Unknown breakpoint: #{$breakpoint}';
  } @else {
    $keys: map.keys($bg-breakpoints);
    $index: list.index($keys, $breakpoint);

    @if $index == null {
      @warn 'Unknown breakpoint: #{$breakpoint}';
    } @else {
      $next-index: $index + 1;
      $next-value: if($next-index <= list.length($keys), map.get($bg-breakpoints, list.nth($keys, $next-index)), null);

      @if $next-value == null {
        @include up($breakpoint) {
          @content;
        }
      } @else if $value == 0 {
        $max: $next-value - 0.02px;
        @media (max-width: $max) {
          @content;
        }
      } @else {
        $max: $next-value - 0.02px;
        @media (min-width: $value) and (max-width: $max) {
          @content;
        }
      }
    }
  }
}

@mixin container($max-width: var(--content-max-width, 1080px)) {
  width: min(100%, $max-width);
  margin-left: auto;
  margin-right: auto;
}

@mixin auto-grid($min-width: 260px, $gap: var(--grid-gap, 24px)) {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax($min-width, 1fr));
  gap: $gap;
}
